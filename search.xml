<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>避免JOIN</title>
    <url>/2021/11/26/Mysql%E8%A7%84%E7%BA%A6-%E5%BB%BA%E8%A1%A8%E8%A7%84%E7%BA%A6/</url>
    <content><![CDATA[<h2 id="建表规约"><a href="#建表规约" class="headerlink" title="建表规约"></a>建表规约</h2><p>1、【强制】表达是与否概念的字段，必须使用 is _ xxx 的方式命名，数据类型是 <strong>unsigned tinyint</strong>（ 1 表示是，0 表示否 ） ，此规则同样适用于 odps 建表。<br><strong>说明</strong>：任何字段如果为非负数，必须是 unsigned 。</p>
<ul>
<li>正例：表达逻辑删除的字段名 is_deleted ，1 表示删除，0 表示未删除。</li>
<li>也可以用类似deletedflag这样的字段，便于扩展数据类型用【unsigned tinyint】</li>
</ul>
<p>2、【强制】表名、字段名必须使用小写字母或数字 ； 禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p>
<p><strong>说明</strong>：<code>MySQL</code> 在<code>Windows</code> 下不区分大小写，但在 `Linux`` 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。<br>正例： getter <em> admin ， task </em> config ， level 3_ name<br>反例： GetterAdmin ， taskConfig ， level 3 name</p>
<p>3、【强制】表名不使用复数名词。<br><strong>说明</strong>：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p>
<p>4、【强制】禁用保留字，如 desc 、 range 、 match 、 delayed 等，请参考 MySQL 官方保留字<em>。</em></p>
<p>5、【强制】唯一索引名为 uk <em>字段名 ； 普通索引名则为 idx</em> <em>字段名。</em><br><strong>*说明</strong>： uk<em> </em>即 unique key；idx* 即 index 的简称。</p>
<p>6、【强制】小数类型为 decimal ，禁止使用 float 和 double 。<br><strong>说明</strong>： float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不<br>正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>
<p>7、【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p>
<p>8、【强制】 varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text ，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p>
<p>9、【强制】表必备三字段： id , gmt <em> create , gmt </em> modified 。<br><strong>说明</strong>：其中 id 必为主键，类型为 unsigned bigint 、单表时自增、步长为 1。 gmt <em> create ,gmt </em> modified 的类型均为 date _ time 类型。前者现在时表示主动创建，后者过去分词表示被动更新。<em>也可用create_time和modify_time</em></p>
<p>10、【推荐】表的命名最好是加上“业务名称<em>表的作用”。<br>正例： tiger </em> task / tiger <em> reader / mpp </em> config</p>
<p>11、【推荐】库名与应用名称尽量一致。</p>
<p>12、【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p>
<p>13、【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：</p>
<ul>
<li>不是频繁修改的字段。</li>
<li>不是 varchar 超长字段，更不能是 text 字段。<br>正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</li>
</ul>
<p>14、【推荐】单表行数超过 500 万行或者单表容量超过 2 GB ，才推荐进行分库分表。<br><strong>说明</strong>：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>
<p>15、【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。<br>正例：人的年龄用 unsigned tinyint（ 表示范围 0-255，人的寿命不会超过 255 岁 ）； 海龟就必须是 smallint ，但如果是太阳的年龄，就必须是 int； 如果是所有恒星的年龄都加起来，那么就必须使用 bigint 。</p>
<p><img src="https://pic3.zhimg.com/v2-aecb59906d48382e51db3af97e2b194a_b.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器(Filter)和拦截器(Interceptor)的区别</title>
    <url>/2021/11/25/%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8(Interceptor)%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>过滤器可以修改request，而拦截器不能</p>
<p>过滤器只能在请求的前后使用，而拦截器可以详细到每个方法</p>
<p>过滤器就是筛选出你要的东西，比如request中你要的那部分</p>
<p>拦截器主要用于安全方面，比如终止一些流程</p>
]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
  </entry>
  <entry>
    <title>线程池最佳边界值计算</title>
    <url>/2021/11/24/%E6%9C%80%E4%BD%B3%E7%BA%BF%E7%A8%8B%E6%95%B0%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class that calculates the optimal thread pool boundaries. It takes the desired target utilization and the desired</span></span><br><span class="line"><span class="comment"> * work queue memory consumption as input and retuns thread count and work queue capacity.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Niklas Schlimm</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolSizeCalculator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The sample queue size to calculate the size of a single &#123;<span class="doctag">@link</span> Runnable&#125; element.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SAMPLE_QUEUE_SIZE = <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Accuracy of test run. It must finish within 20ms of the testTime otherwise we retry the test. This could be</span></span><br><span class="line"><span class="comment">  * configurable.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> EPSYLON = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Control variable for the CPU time investigation.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> expired;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Time (millis) of the test run in the CPU time calculation.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> testtime = <span class="number">3000</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Calculates the boundaries of a thread pool for a given &#123;<span class="doctag">@link</span> Runnable&#125;.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> targetUtilization</span></span><br><span class="line"><span class="comment">  *            the desired utilization of the CPUs (0 &lt;= targetUtilization &lt;= 1)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> targetQueueSizeBytes</span></span><br><span class="line"><span class="comment">  *            the desired maximum work queue size of the thread pool (bytes)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">calculateBoundaries</span><span class="params">(BigDecimal targetUtilization, BigDecimal targetQueueSizeBytes)</span> </span>&#123;</span><br><span class="line">  calculateOptimalCapacity(targetQueueSizeBytes);</span><br><span class="line">  Runnable task = creatTask();</span><br><span class="line">  start(task);</span><br><span class="line">  start(task); <span class="comment">// warm up phase</span></span><br><span class="line">  <span class="keyword">long</span> cputime = getCurrentThreadCPUTime();</span><br><span class="line">  start(task); <span class="comment">// test intervall</span></span><br><span class="line">  cputime = getCurrentThreadCPUTime() - cputime;</span><br><span class="line">  <span class="keyword">long</span> waittime = (testtime * <span class="number">1000000</span>) - cputime;</span><br><span class="line">  calculateOptimalThreadCount(cputime, waittime, targetUtilization);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalCapacity</span><span class="params">(BigDecimal targetQueueSizeBytes)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> mem = calculateMemoryUsage();</span><br><span class="line">  BigDecimal queueCapacity = targetQueueSizeBytes.divide(<span class="keyword">new</span> BigDecimal(mem), RoundingMode.HALF_UP);</span><br><span class="line">  System.out.println(<span class="string">&quot;Target queue memory usage (bytes): &quot;</span> + targetQueueSizeBytes);</span><br><span class="line">  System.out.println(<span class="string">&quot;createTask() produced &quot;</span> + creatTask().getClass().getName() + <span class="string">&quot; which took &quot;</span> + mem</span><br><span class="line">    + <span class="string">&quot; bytes in a queue&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;Formula: &quot;</span> + targetQueueSizeBytes + <span class="string">&quot; / &quot;</span> + mem);</span><br><span class="line">  System.out.println(<span class="string">&quot;* Recommended queue capacity (bytes): &quot;</span> + queueCapacity);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Brian Goetz&#x27; optimal thread count formula, see &#x27;Java Concurrency in Practice&#x27; (chapter 8.2)</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> cpu</span></span><br><span class="line"><span class="comment">  *            cpu time consumed by considered task</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> wait</span></span><br><span class="line"><span class="comment">  *            wait time of considered task</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> targetUtilization</span></span><br><span class="line"><span class="comment">  *            target utilization of the system</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalThreadCount</span><span class="params">(<span class="keyword">long</span> cpu, <span class="keyword">long</span> wait, BigDecimal targetUtilization)</span> </span>&#123;</span><br><span class="line">  BigDecimal waitTime = <span class="keyword">new</span> BigDecimal(wait);</span><br><span class="line">  BigDecimal computeTime = <span class="keyword">new</span> BigDecimal(cpu);</span><br><span class="line">  BigDecimal numberOfCPU = <span class="keyword">new</span> BigDecimal(Runtime.getRuntime().availableProcessors());</span><br><span class="line">  BigDecimal optimalthreadcount = numberOfCPU.multiply(targetUtilization).multiply(</span><br><span class="line">    <span class="keyword">new</span> BigDecimal(<span class="number">1</span>).add(waitTime.divide(computeTime, RoundingMode.HALF_UP)));</span><br><span class="line">  System.out.println(<span class="string">&quot;Number of CPU: &quot;</span> + numberOfCPU);</span><br><span class="line">  System.out.println(<span class="string">&quot;Target utilization: &quot;</span> + targetUtilization);</span><br><span class="line">  System.out.println(<span class="string">&quot;Elapsed time (nanos): &quot;</span> + (testtime * <span class="number">1000000</span>));</span><br><span class="line">  System.out.println(<span class="string">&quot;Compute time (nanos): &quot;</span> + cpu);</span><br><span class="line">  System.out.println(<span class="string">&quot;Wait time (nanos): &quot;</span> + wait);</span><br><span class="line">  System.out.println(<span class="string">&quot;Formula: &quot;</span> + numberOfCPU + <span class="string">&quot; * &quot;</span> + targetUtilization + <span class="string">&quot; * (1 + &quot;</span> + waitTime + <span class="string">&quot; / &quot;</span></span><br><span class="line">    + computeTime + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;* Optimal thread count: &quot;</span> + optimalthreadcount);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Runs the &#123;<span class="doctag">@link</span> Runnable&#125; over a period defined in &#123;<span class="doctag">@link</span> #testtime&#125;. Based on Heinz Kabbutz&#x27; ideas</span></span><br><span class="line"><span class="comment">  * (http://www.javaspecialists.eu/archive/Issue124.html).</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">  *            the runnable under investigation</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> runs = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (++runs &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Test not accurate&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   expired = <span class="keyword">false</span>;</span><br><span class="line">   start = System.currentTimeMillis();</span><br><span class="line">   Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">   timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     expired = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, testtime);</span><br><span class="line">   <span class="keyword">while</span> (!expired) &#123;</span><br><span class="line">    task.run();</span><br><span class="line">   &#125;</span><br><span class="line">   start = System.currentTimeMillis() - start;</span><br><span class="line">   timer.cancel();</span><br><span class="line">  &#125; <span class="keyword">while</span> (Math.abs(start - testtime) &gt; EPSYLON);</span><br><span class="line">  collectGarbage(<span class="number">3</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collectGarbage</span><span class="params">(<span class="keyword">int</span> times)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">   System.gc();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Calculates the memory usage of a single element in a work queue. Based on Heinz Kabbutz&#x27; ideas</span></span><br><span class="line"><span class="comment">  * (http://www.javaspecialists.eu/archive/Issue029.html).</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> memory usage of a single &#123;<span class="doctag">@link</span> Runnable&#125; element in the thread pools work queue</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">calculateMemoryUsage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BlockingQueue&lt;Runnable&gt; queue = createWorkQueue();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) &#123;</span><br><span class="line">   queue.add(creatTask());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> mem0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  <span class="keyword">long</span> mem1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  queue = <span class="keyword">null</span>;</span><br><span class="line">  collectGarbage(<span class="number">15</span>);</span><br><span class="line">  mem0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  queue = createWorkQueue();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) &#123;</span><br><span class="line">   queue.add(creatTask());</span><br><span class="line">  &#125;</span><br><span class="line">  collectGarbage(<span class="number">15</span>);</span><br><span class="line">  mem1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  <span class="keyword">return</span> (mem1 - mem0) / SAMPLE_QUEUE_SIZE;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Create your runnable task here.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> an instance of your runnable task under investigation</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Runnable <span class="title">creatTask</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Return an instance of the queue used in the thread pool.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> queue instance</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> BlockingQueue&lt;Runnable&gt; <span class="title">createWorkQueue</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Calculate current cpu time. Various frameworks may be used here, depending on the operating system in use. (e.g.</span></span><br><span class="line"><span class="comment">  * http://www.hyperic.com/products/sigar). The more accurate the CPU time measurement, the more accurate the results</span></span><br><span class="line"><span class="comment">  * for thread count boundaries.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> current cpu time of current thread</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getCurrentThreadCPUTime</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://www.javacodegeeks.com/2012/03/threading-stories-about-robust-thread.html">docs</a></p>
]]></content>
      <categories>
        <category>线程</category>
      </categories>
  </entry>
</search>
