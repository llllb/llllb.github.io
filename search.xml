<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>线程池最佳边界值计算</title>
    <url>/2021/11/24/%E6%9C%80%E4%BD%B3%E7%BA%BF%E7%A8%8B%E6%95%B0%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class that calculates the optimal thread pool boundaries. It takes the desired target utilization and the desired</span></span><br><span class="line"><span class="comment"> * work queue memory consumption as input and retuns thread count and work queue capacity.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Niklas Schlimm</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolSizeCalculator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The sample queue size to calculate the size of a single &#123;<span class="doctag">@link</span> Runnable&#125; element.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SAMPLE_QUEUE_SIZE = <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Accuracy of test run. It must finish within 20ms of the testTime otherwise we retry the test. This could be</span></span><br><span class="line"><span class="comment">  * configurable.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> EPSYLON = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Control variable for the CPU time investigation.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> expired;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Time (millis) of the test run in the CPU time calculation.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> testtime = <span class="number">3000</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Calculates the boundaries of a thread pool for a given &#123;<span class="doctag">@link</span> Runnable&#125;.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> targetUtilization</span></span><br><span class="line"><span class="comment">  *            the desired utilization of the CPUs (0 &lt;= targetUtilization &lt;= 1)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> targetQueueSizeBytes</span></span><br><span class="line"><span class="comment">  *            the desired maximum work queue size of the thread pool (bytes)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">calculateBoundaries</span><span class="params">(BigDecimal targetUtilization, BigDecimal targetQueueSizeBytes)</span> </span>&#123;</span><br><span class="line">  calculateOptimalCapacity(targetQueueSizeBytes);</span><br><span class="line">  Runnable task = creatTask();</span><br><span class="line">  start(task);</span><br><span class="line">  start(task); <span class="comment">// warm up phase</span></span><br><span class="line">  <span class="keyword">long</span> cputime = getCurrentThreadCPUTime();</span><br><span class="line">  start(task); <span class="comment">// test intervall</span></span><br><span class="line">  cputime = getCurrentThreadCPUTime() - cputime;</span><br><span class="line">  <span class="keyword">long</span> waittime = (testtime * <span class="number">1000000</span>) - cputime;</span><br><span class="line">  calculateOptimalThreadCount(cputime, waittime, targetUtilization);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalCapacity</span><span class="params">(BigDecimal targetQueueSizeBytes)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> mem = calculateMemoryUsage();</span><br><span class="line">  BigDecimal queueCapacity = targetQueueSizeBytes.divide(<span class="keyword">new</span> BigDecimal(mem), RoundingMode.HALF_UP);</span><br><span class="line">  System.out.println(<span class="string">&quot;Target queue memory usage (bytes): &quot;</span> + targetQueueSizeBytes);</span><br><span class="line">  System.out.println(<span class="string">&quot;createTask() produced &quot;</span> + creatTask().getClass().getName() + <span class="string">&quot; which took &quot;</span> + mem</span><br><span class="line">    + <span class="string">&quot; bytes in a queue&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;Formula: &quot;</span> + targetQueueSizeBytes + <span class="string">&quot; / &quot;</span> + mem);</span><br><span class="line">  System.out.println(<span class="string">&quot;* Recommended queue capacity (bytes): &quot;</span> + queueCapacity);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Brian Goetz&#x27; optimal thread count formula, see &#x27;Java Concurrency in Practice&#x27; (chapter 8.2)</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> cpu</span></span><br><span class="line"><span class="comment">  *            cpu time consumed by considered task</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> wait</span></span><br><span class="line"><span class="comment">  *            wait time of considered task</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> targetUtilization</span></span><br><span class="line"><span class="comment">  *            target utilization of the system</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalThreadCount</span><span class="params">(<span class="keyword">long</span> cpu, <span class="keyword">long</span> wait, BigDecimal targetUtilization)</span> </span>&#123;</span><br><span class="line">  BigDecimal waitTime = <span class="keyword">new</span> BigDecimal(wait);</span><br><span class="line">  BigDecimal computeTime = <span class="keyword">new</span> BigDecimal(cpu);</span><br><span class="line">  BigDecimal numberOfCPU = <span class="keyword">new</span> BigDecimal(Runtime.getRuntime().availableProcessors());</span><br><span class="line">  BigDecimal optimalthreadcount = numberOfCPU.multiply(targetUtilization).multiply(</span><br><span class="line">    <span class="keyword">new</span> BigDecimal(<span class="number">1</span>).add(waitTime.divide(computeTime, RoundingMode.HALF_UP)));</span><br><span class="line">  System.out.println(<span class="string">&quot;Number of CPU: &quot;</span> + numberOfCPU);</span><br><span class="line">  System.out.println(<span class="string">&quot;Target utilization: &quot;</span> + targetUtilization);</span><br><span class="line">  System.out.println(<span class="string">&quot;Elapsed time (nanos): &quot;</span> + (testtime * <span class="number">1000000</span>));</span><br><span class="line">  System.out.println(<span class="string">&quot;Compute time (nanos): &quot;</span> + cpu);</span><br><span class="line">  System.out.println(<span class="string">&quot;Wait time (nanos): &quot;</span> + wait);</span><br><span class="line">  System.out.println(<span class="string">&quot;Formula: &quot;</span> + numberOfCPU + <span class="string">&quot; * &quot;</span> + targetUtilization + <span class="string">&quot; * (1 + &quot;</span> + waitTime + <span class="string">&quot; / &quot;</span></span><br><span class="line">    + computeTime + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;* Optimal thread count: &quot;</span> + optimalthreadcount);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Runs the &#123;<span class="doctag">@link</span> Runnable&#125; over a period defined in &#123;<span class="doctag">@link</span> #testtime&#125;. Based on Heinz Kabbutz&#x27; ideas</span></span><br><span class="line"><span class="comment">  * (http://www.javaspecialists.eu/archive/Issue124.html).</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">  *            the runnable under investigation</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> runs = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (++runs &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Test not accurate&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   expired = <span class="keyword">false</span>;</span><br><span class="line">   start = System.currentTimeMillis();</span><br><span class="line">   Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">   timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     expired = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, testtime);</span><br><span class="line">   <span class="keyword">while</span> (!expired) &#123;</span><br><span class="line">    task.run();</span><br><span class="line">   &#125;</span><br><span class="line">   start = System.currentTimeMillis() - start;</span><br><span class="line">   timer.cancel();</span><br><span class="line">  &#125; <span class="keyword">while</span> (Math.abs(start - testtime) &gt; EPSYLON);</span><br><span class="line">  collectGarbage(<span class="number">3</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collectGarbage</span><span class="params">(<span class="keyword">int</span> times)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">   System.gc();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Calculates the memory usage of a single element in a work queue. Based on Heinz Kabbutz&#x27; ideas</span></span><br><span class="line"><span class="comment">  * (http://www.javaspecialists.eu/archive/Issue029.html).</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> memory usage of a single &#123;<span class="doctag">@link</span> Runnable&#125; element in the thread pools work queue</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">calculateMemoryUsage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BlockingQueue&lt;Runnable&gt; queue = createWorkQueue();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) &#123;</span><br><span class="line">   queue.add(creatTask());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> mem0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  <span class="keyword">long</span> mem1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  queue = <span class="keyword">null</span>;</span><br><span class="line">  collectGarbage(<span class="number">15</span>);</span><br><span class="line">  mem0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  queue = createWorkQueue();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) &#123;</span><br><span class="line">   queue.add(creatTask());</span><br><span class="line">  &#125;</span><br><span class="line">  collectGarbage(<span class="number">15</span>);</span><br><span class="line">  mem1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  <span class="keyword">return</span> (mem1 - mem0) / SAMPLE_QUEUE_SIZE;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Create your runnable task here.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> an instance of your runnable task under investigation</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Runnable <span class="title">creatTask</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Return an instance of the queue used in the thread pool.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> queue instance</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> BlockingQueue&lt;Runnable&gt; <span class="title">createWorkQueue</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Calculate current cpu time. Various frameworks may be used here, depending on the operating system in use. (e.g.</span></span><br><span class="line"><span class="comment">  * http://www.hyperic.com/products/sigar). The more accurate the CPU time measurement, the more accurate the results</span></span><br><span class="line"><span class="comment">  * for thread count boundaries.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> current cpu time of current thread</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getCurrentThreadCPUTime</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
