<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>打上花火</title>
  
  <subtitle>码农</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-02T07:45:22.923Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis全局变量的应用</title>
    <link href="http://example.com/2021/12/02/Mybatis%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2021/12/02/Mybatis%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2021-12-02T07:38:16.000Z</published>
    <updated>2021-12-02T07:45:22.923Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.demo</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">variables:</span></span><br><span class="line">      <span class="attr">db1:</span> <span class="string">aaa</span></span><br><span class="line">      <span class="attr">db2:</span> <span class="string">bbb</span></span><br></pre></td></tr></table></figure><p>mybatis.configuration.variables是一个可自定义的全局变量,可以在mapper.xml文件中直接引用。</p><p>在mapper.xml中使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select userName from $&#123;db1&#125;.userInfo</span><br></pre></td></tr></table></figure><p>动态修改配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.session;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> Properties variables;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.session.Configuration configuration = sqlSessionFactory.getConfiguration();</span><br><span class="line">Properties variables = configuration.getVariables();</span><br><span class="line">variables.setProperty(<span class="string">&quot;userName&quot;</span>, userName);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="Mybatis" scheme="http://example.com/categories/Mybatis/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql规范-索引规约</title>
    <link href="http://example.com/2021/11/26/Mysql%E8%A7%84%E7%BA%A6-%E7%B4%A2%E5%BC%95%E8%A7%84%E7%BA%A6/"/>
    <id>http://example.com/2021/11/26/Mysql%E8%A7%84%E7%BA%A6-%E7%B4%A2%E5%BC%95%E8%A7%84%E7%BA%A6/</id>
    <published>2021-11-26T06:11:22.000Z</published>
    <updated>2021-11-26T08:18:44.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引规约"><a href="#索引规约" class="headerlink" title="索引规约"></a>索引规约</h2><p>1、【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<br><strong>说明</strong>：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明<br>显的 ； 另外，即使在应用层做了非常完善的校验和控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p><p>2、【强制】 超过三个表禁止 join 。需要 join 的字段，数据类型保持绝对一致 ； 多表关联查询时，保证被关联的字段需要有索引。<br><strong>说明</strong>：即使双表 join 也要注意表索引、 SQL 性能。</p><p>3、【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。<br><strong>说明</strong>：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分<br>度会高达 90%以上，可以使用 <strong>count(distinct left( 列名, 索引长度 )) / count( * )</strong> 的区分度<br>来确定。</p><p>4、【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<br><strong>说明</strong>：索引文件具有 B - Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p><p>5、【推荐】如果有 order by 的场景，请注意利用索引的有序性。 order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file <em> sort 的情况，影响查询性能。<br>正例： where a =? and b =? order by c; 索引： a </em> b <em> c<br>反例：索引中有范围查找，那么索引有序性无法利用，如： WHERE a &gt;10 ORDER BY b; 索引a </em> b 无法排序。</p><p>6、【推荐】利用覆盖索引来进行查询操作，来避免回表操作。<br><strong>说明</strong>：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览<br>一下就好，这个目录就是起到覆盖索引的作用。<br>正例：能够建立索引的种类：主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种<br>效果，用 explain 的结果， extra 列会出现： using index 。</p><p><a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/dragonsuc/p/6938006.html">覆盖索引举例</a></p><p>7、【推荐】利用延迟关联或者子查询优化超多分页场景。<br><strong>说明</strong>： MySQL 并不是跳过 offset 行，而是取 offset + N 行，然后返回放弃前 offset 行，返回N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。<br>正例：先快速定位需要获取的 id 段，然后再关联：<br>SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id=b.id</p><p>8、【推荐】 SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是 consts最好。<br><strong>说明</strong>：</p><ul><li>consts 单表中最多只有一个匹配行 （ 主键或者唯一索引 ） ，在优化阶段即可读取到数据。</li><li>ref 指的是使用普通的索引 （normal index） 。</li><li>range 对索引进行范围检索。<br>反例： explain 表的结果， type = index ，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。</li></ul><p>9、【推荐】建组合索引的时候，区分度最高的在最左边。<br>正例：如果 where a =? and b =? ， a 列的几乎接近于唯一值，那么只需要单建 idx _ a 索引即可。<br><strong>说明</strong>：存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如： where a &gt;?and b =? 那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</p><p>10、【参考】创建索引时避免有如下极端误解：<br>1 ） 误认为一个查询就需要建一个索引。<br>2 ） 误认为索引会消耗空间、严重拖慢更新和新增速度。<br>3 ） 误认为唯一索引一律需要在应用层通过“先查后插”方式解决。</p><p>11、【推荐】防止因字段类型不同造成的隐式转换，导致索引失效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;索引规约&quot;&gt;&lt;a href=&quot;#索引规约&quot; class=&quot;headerlink&quot; title=&quot;索引规约&quot;&gt;&lt;/a&gt;索引规约&lt;/h2&gt;&lt;p&gt;1、【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。&lt;br&gt;&lt;strong&gt;说明&lt;/strong&gt;：不</summary>
      
    
    
    
    <category term="Mysql" scheme="http://example.com/categories/Mysql/"/>
    
    
    <category term="mysq" scheme="http://example.com/tags/mysq/"/>
    
  </entry>
  
  <entry>
    <title>Mysql规范-SQL规约</title>
    <link href="http://example.com/2021/11/26/Mysql%E8%A7%84%E7%BA%A6-SQL%E8%A7%84%E7%BA%A6/"/>
    <id>http://example.com/2021/11/26/Mysql%E8%A7%84%E7%BA%A6-SQL%E8%A7%84%E7%BA%A6/</id>
    <published>2021-11-26T06:11:22.000Z</published>
    <updated>2021-11-26T08:19:50.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL规约"><a href="#SQL规约" class="headerlink" title="SQL规约"></a>SQL规约</h2><p>1、【强制】不要使用 count( 列名 ) 或 count( 常量 ) 来替代 count( <em> ) ， count( </em> ) 就是 SQL 92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。<br><strong>说明</strong>： count( * ) 会统计值为 NULL 的行，而 count( 列名 ) 不会统计此列为 NULL 值的行。</p><p>2、【强制】 count(distinct col) 计算该列除 NULL 之外的不重复数量。注意 count(distinct<br>col 1, col 2 ) 如果其中一列全为 NULL ，那么即使另一列有不同的值，也返回为 0。</p><p>3、【强制】当某一列的值全是 NULL 时， count(col) 的返回结果为 0，但 sum(col) 的返回结果为NULL ，因此使用 sum() 时需注意 NPE 问题。</p><p>正例：可以使用如下方式来避免 sum 的 NPE 问题： SELECT IF(ISNULL(SUM(g)) ,0, SUM(g)) FROM table;</p><p>4、【强制】使用 ISNULL() 来判断是否为 NULL 值。注意： NULL 与任何值的直接比较都为 NULL。<br><strong>说明</strong>：<br>1 ） NULL&lt;&gt;NULL 的返回结果是 NULL ，而不是 false 。<br>2 ） NULL=NULL 的返回结果是 NULL ，而不是 true 。<br>3 ） NULL&lt;&gt;1 的返回结果是 NULL ，而不是 true 。</p><p>5、【强制】 在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p><p>6、【强制】不得使用外键与级联，一切外键概念必须在应用层解决。<br><strong>说明</strong>： （ 概念解释 ） 学生表中的 student <em> id 是主键，那么成绩表中的 student </em> id 则为外键。如果更新学生表中的 student <em> id ，同时触发成绩表中的 student </em> id 更新，则为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群 ； 级联更新是强阻塞，存在数据库更新风暴的风险 ； 外键影响数据库的插入速度。</p><p>7、【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p><p>8、【强制】数据订正时，删除和修改记录时，要先 select ，避免出现误删除，确认无误才能执行更新语句。</p><p>9、【推荐】 in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</p><p>10、【参考】如果有全球化需要，所有的字符存储与表示，均以 utf -8 编码，那么字符计数方法注意：<br><strong>说明</strong>：<br>SELECT LENGTH( “轻松工作” )； 返回为 12<br>SELECT CHARACTER _ LENGTH( “轻松工作” )； 返回为 4<br>如果要使用表情，那么使用 utfmb 4 来进行存储，注意它与 utf -8 编码的区别。</p><p>11、【参考】 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE无事务且不触发 trigger ，有可能造成事故，故不建议在开发代码中使用此语句。<br><strong>说明</strong>： TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SQL规约&quot;&gt;&lt;a href=&quot;#SQL规约&quot; class=&quot;headerlink&quot; title=&quot;SQL规约&quot;&gt;&lt;/a&gt;SQL规约&lt;/h2&gt;&lt;p&gt;1、【强制】不要使用 count( 列名 ) 或 count( 常量 ) 来替代 count( &lt;em&gt; ) ， c</summary>
      
    
    
    
    <category term="Mysql" scheme="http://example.com/categories/Mysql/"/>
    
    
    <category term="mysq" scheme="http://example.com/tags/mysq/"/>
    
  </entry>
  
  <entry>
    <title>Mysql规范-ORM规约</title>
    <link href="http://example.com/2021/11/26/Mysql%E8%A7%84%E7%BA%A6-ORM%E8%A7%84%E7%BA%A6/"/>
    <id>http://example.com/2021/11/26/Mysql%E8%A7%84%E7%BA%A6-ORM%E8%A7%84%E7%BA%A6/</id>
    <published>2021-11-26T06:11:22.000Z</published>
    <updated>2021-11-26T08:20:42.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ORM规约"><a href="#ORM规约" class="headerlink" title="ORM规约"></a>ORM规约</h2><p>1、【强制】在表查询中，一律不要使用 <em> 作为查询的字段列表，需要哪些字段必须明确写明。<br><em>*说明</em></em>：</p><ul><li>增加查询分析器解析成本。</li><li>增减字段容易与 resultMap 配置不一致。</li></ul><p>2、【强制】 POJO 类的 boolean 属性不能加 is ，而数据库字段必须加 is _，要求在 resultMap 中进行字段与属性之间的映射。<br><strong>说明</strong>：参见定义 POJO 类以及数据库字段定义规定，在 sql . xml 增加映射，是必须的。</p><p>3、【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义 ； 反过来，每一个表也必然有一个与之对应。<br><strong>说明</strong>：配置映射关系，使字段与 DO 类解耦，方便维护。</p><p>4、【强制】 xml 配置中参数注意使用：#{}，# param # 不要使用${} 此种方式容易出现 SQL 注入。</p><p>5、【强制】 iBATIS 自带的 queryForList(String statementName , int start , int size) 不推<br>荐使用。<br><strong>说明</strong>：其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList取 start , size 的子集合，线上因为这个原因曾经出现过 OOM 。<br>正例：在 sqlmap . xml 中引入 #start#, #size#<br>Map<String, Object> map = new HashMap<String, Object>();<br>map.put(“start”, start);<br>map.put(“size”, size);</p><p>6、【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</p><p>7、【强制】更新数据表记录时，必须同时更新记录对应的 gmt _ modified 字段值为当前时间。</p><p>8、【推荐】不要写一个大而全的数据更新接口，传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行 SQL时，尽量不要更新无改动的字段，一是易出错 ； 二是效率低 ； 三是 binlog 增加存储。</p><p>9、【参考】@ Transactional 事务不要滥用。事务会影响数据库的 QPS ，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p><p>10、【参考】&lt; isEqual &gt;中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件 ； &lt; isNotEmpty &gt;表示不为空且不为 null 时执行 ； &lt; isNotNull &gt;表示不为 null 值时执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ORM规约&quot;&gt;&lt;a href=&quot;#ORM规约&quot; class=&quot;headerlink&quot; title=&quot;ORM规约&quot;&gt;&lt;/a&gt;ORM规约&lt;/h2&gt;&lt;p&gt;1、【强制】在表查询中，一律不要使用 &lt;em&gt; 作为查询的字段列表，需要哪些字段必须明确写明。&lt;br&gt;&lt;em&gt;*说明</summary>
      
    
    
    
    <category term="Mysql" scheme="http://example.com/categories/Mysql/"/>
    
    
    <category term="mysq" scheme="http://example.com/tags/mysq/"/>
    
  </entry>
  
  <entry>
    <title>Mysql规约-建表规约</title>
    <link href="http://example.com/2021/11/26/Mysql%E8%A7%84%E7%BA%A6-%E5%BB%BA%E8%A1%A8%E8%A7%84%E7%BA%A6/"/>
    <id>http://example.com/2021/11/26/Mysql%E8%A7%84%E7%BA%A6-%E5%BB%BA%E8%A1%A8%E8%A7%84%E7%BA%A6/</id>
    <published>2021-11-26T06:11:22.000Z</published>
    <updated>2021-11-26T08:18:20.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建表规约"><a href="#建表规约" class="headerlink" title="建表规约"></a>建表规约</h2><p>1、【强制】表达是与否概念的字段，必须使用 is _ xxx 的方式命名，数据类型是 <strong>unsigned tinyint</strong>（ 1 表示是，0 表示否 ） ，此规则同样适用于 odps 建表。<br><strong>说明</strong>：任何字段如果为非负数，必须是 unsigned 。</p><ul><li>正例：表达逻辑删除的字段名 is_deleted ，1 表示删除，0 表示未删除。</li><li>也可以用类似deletedflag这样的字段，便于扩展数据类型用【unsigned tinyint】</li></ul><p>2、【强制】表名、字段名必须使用小写字母或数字 ； 禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><p><strong>说明</strong>：<code>MySQL</code> 在<code>Windows</code> 下不区分大小写，但在 `Linux`` 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。<br>正例： getter <em> admin ， task </em> config ， level 3_ name<br>反例： GetterAdmin ， taskConfig ， level 3 name</p><p>3、【强制】表名不使用复数名词。<br><strong>说明</strong>：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p><p>4、【强制】禁用保留字，如 desc 、 range 、 match 、 delayed 等，请参考 MySQL 官方保留字<em>。</em></p><p>5、【强制】唯一索引名为 uk <em>字段名 ； 普通索引名则为 idx</em> <em>字段名。</em><br><strong>*说明</strong>： uk<em> </em>即 unique key；idx* 即 index 的简称。</p><p>6、【强制】小数类型为 decimal ，禁止使用 float 和 double 。<br><strong>说明</strong>： float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不<br>正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p><p>7、【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p><p>8、【强制】 varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text ，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p><p>9、【强制】表必备三字段： id , gmt <em> create , gmt </em> modified 。<br><strong>说明</strong>：其中 id 必为主键，类型为 unsigned bigint 、单表时自增、步长为 1。 gmt <em> create ,gmt </em> modified 的类型均为 date _ time 类型。前者现在时表示主动创建，后者过去分词表示被动更新。<em>也可用create_time和modify_time</em></p><p>10、【推荐】表的命名最好是加上“业务名称<em>表的作用”。<br>正例： tiger </em> task / tiger <em> reader / mpp </em> config</p><p>11、【推荐】库名与应用名称尽量一致。</p><p>12、【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p><p>13、【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：</p><ul><li>不是频繁修改的字段。</li><li>不是 varchar 超长字段，更不能是 text 字段。<br>正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</li></ul><p>14、【推荐】单表行数超过 500 万行或者单表容量超过 2 GB ，才推荐进行分库分表。<br><strong>说明</strong>：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p><p>15、【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。<br>正例：人的年龄用 unsigned tinyint（ 表示范围 0-255，人的寿命不会超过 255 岁 ）； 海龟就必须是 smallint ，但如果是太阳的年龄，就必须是 int； 如果是所有恒星的年龄都加起来，那么就必须使用 bigint 。</p><p><img src="https://pic3.zhimg.com/v2-aecb59906d48382e51db3af97e2b194a_b.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;建表规约&quot;&gt;&lt;a href=&quot;#建表规约&quot; class=&quot;headerlink&quot; title=&quot;建表规约&quot;&gt;&lt;/a&gt;建表规约&lt;/h2&gt;&lt;p&gt;1、【强制】表达是与否概念的字段，必须使用 is _ xxx 的方式命名，数据类型是 &lt;strong&gt;unsigned ti</summary>
      
    
    
    
    <category term="Mysql" scheme="http://example.com/categories/Mysql/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>过滤器(Filter)和拦截器(Interceptor)的区别</title>
    <link href="http://example.com/2021/11/25/%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8(Interceptor)%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/11/25/%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8(Interceptor)%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-11-25T01:58:16.000Z</published>
    <updated>2021-11-25T02:41:04.183Z</updated>
    
    <content type="html"><![CDATA[<p>过滤器可以修改request，而拦截器不能</p><p>过滤器只能在请求的前后使用，而拦截器可以详细到每个方法</p><p>过滤器就是筛选出你要的东西，比如request中你要的那部分</p><p>拦截器主要用于安全方面，比如终止一些流程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;过滤器可以修改request，而拦截器不能&lt;/p&gt;
&lt;p&gt;过滤器只能在请求的前后使用，而拦截器可以详细到每个方法&lt;/p&gt;
&lt;p&gt;过滤器就是筛选出你要的东西，比如request中你要的那部分&lt;/p&gt;
&lt;p&gt;拦截器主要用于安全方面，比如终止一些流程&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Springboot" scheme="http://example.com/categories/Springboot/"/>
    
    
  </entry>
  
  <entry>
    <title>线程池最佳边界值计算</title>
    <link href="http://example.com/2021/11/24/%E6%9C%80%E4%BD%B3%E7%BA%BF%E7%A8%8B%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
    <id>http://example.com/2021/11/24/%E6%9C%80%E4%BD%B3%E7%BA%BF%E7%A8%8B%E6%95%B0%E8%AE%A1%E7%AE%97/</id>
    <published>2021-11-24T09:53:16.000Z</published>
    <updated>2021-11-24T10:39:00.262Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class that calculates the optimal thread pool boundaries. It takes the desired target utilization and the desired</span></span><br><span class="line"><span class="comment"> * work queue memory consumption as input and retuns thread count and work queue capacity.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Niklas Schlimm</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolSizeCalculator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The sample queue size to calculate the size of a single &#123;<span class="doctag">@link</span> Runnable&#125; element.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SAMPLE_QUEUE_SIZE = <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Accuracy of test run. It must finish within 20ms of the testTime otherwise we retry the test. This could be</span></span><br><span class="line"><span class="comment">  * configurable.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> EPSYLON = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Control variable for the CPU time investigation.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> expired;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Time (millis) of the test run in the CPU time calculation.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> testtime = <span class="number">3000</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Calculates the boundaries of a thread pool for a given &#123;<span class="doctag">@link</span> Runnable&#125;.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> targetUtilization</span></span><br><span class="line"><span class="comment">  *            the desired utilization of the CPUs (0 &lt;= targetUtilization &lt;= 1)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> targetQueueSizeBytes</span></span><br><span class="line"><span class="comment">  *            the desired maximum work queue size of the thread pool (bytes)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">calculateBoundaries</span><span class="params">(BigDecimal targetUtilization, BigDecimal targetQueueSizeBytes)</span> </span>&#123;</span><br><span class="line">  calculateOptimalCapacity(targetQueueSizeBytes);</span><br><span class="line">  Runnable task = creatTask();</span><br><span class="line">  start(task);</span><br><span class="line">  start(task); <span class="comment">// warm up phase</span></span><br><span class="line">  <span class="keyword">long</span> cputime = getCurrentThreadCPUTime();</span><br><span class="line">  start(task); <span class="comment">// test intervall</span></span><br><span class="line">  cputime = getCurrentThreadCPUTime() - cputime;</span><br><span class="line">  <span class="keyword">long</span> waittime = (testtime * <span class="number">1000000</span>) - cputime;</span><br><span class="line">  calculateOptimalThreadCount(cputime, waittime, targetUtilization);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalCapacity</span><span class="params">(BigDecimal targetQueueSizeBytes)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> mem = calculateMemoryUsage();</span><br><span class="line">  BigDecimal queueCapacity = targetQueueSizeBytes.divide(<span class="keyword">new</span> BigDecimal(mem), RoundingMode.HALF_UP);</span><br><span class="line">  System.out.println(<span class="string">&quot;Target queue memory usage (bytes): &quot;</span> + targetQueueSizeBytes);</span><br><span class="line">  System.out.println(<span class="string">&quot;createTask() produced &quot;</span> + creatTask().getClass().getName() + <span class="string">&quot; which took &quot;</span> + mem</span><br><span class="line">    + <span class="string">&quot; bytes in a queue&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;Formula: &quot;</span> + targetQueueSizeBytes + <span class="string">&quot; / &quot;</span> + mem);</span><br><span class="line">  System.out.println(<span class="string">&quot;* Recommended queue capacity (bytes): &quot;</span> + queueCapacity);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Brian Goetz&#x27; optimal thread count formula, see &#x27;Java Concurrency in Practice&#x27; (chapter 8.2)</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> cpu</span></span><br><span class="line"><span class="comment">  *            cpu time consumed by considered task</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> wait</span></span><br><span class="line"><span class="comment">  *            wait time of considered task</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> targetUtilization</span></span><br><span class="line"><span class="comment">  *            target utilization of the system</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalThreadCount</span><span class="params">(<span class="keyword">long</span> cpu, <span class="keyword">long</span> wait, BigDecimal targetUtilization)</span> </span>&#123;</span><br><span class="line">  BigDecimal waitTime = <span class="keyword">new</span> BigDecimal(wait);</span><br><span class="line">  BigDecimal computeTime = <span class="keyword">new</span> BigDecimal(cpu);</span><br><span class="line">  BigDecimal numberOfCPU = <span class="keyword">new</span> BigDecimal(Runtime.getRuntime().availableProcessors());</span><br><span class="line">  BigDecimal optimalthreadcount = numberOfCPU.multiply(targetUtilization).multiply(</span><br><span class="line">    <span class="keyword">new</span> BigDecimal(<span class="number">1</span>).add(waitTime.divide(computeTime, RoundingMode.HALF_UP)));</span><br><span class="line">  System.out.println(<span class="string">&quot;Number of CPU: &quot;</span> + numberOfCPU);</span><br><span class="line">  System.out.println(<span class="string">&quot;Target utilization: &quot;</span> + targetUtilization);</span><br><span class="line">  System.out.println(<span class="string">&quot;Elapsed time (nanos): &quot;</span> + (testtime * <span class="number">1000000</span>));</span><br><span class="line">  System.out.println(<span class="string">&quot;Compute time (nanos): &quot;</span> + cpu);</span><br><span class="line">  System.out.println(<span class="string">&quot;Wait time (nanos): &quot;</span> + wait);</span><br><span class="line">  System.out.println(<span class="string">&quot;Formula: &quot;</span> + numberOfCPU + <span class="string">&quot; * &quot;</span> + targetUtilization + <span class="string">&quot; * (1 + &quot;</span> + waitTime + <span class="string">&quot; / &quot;</span></span><br><span class="line">    + computeTime + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;* Optimal thread count: &quot;</span> + optimalthreadcount);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Runs the &#123;<span class="doctag">@link</span> Runnable&#125; over a period defined in &#123;<span class="doctag">@link</span> #testtime&#125;. Based on Heinz Kabbutz&#x27; ideas</span></span><br><span class="line"><span class="comment">  * (http://www.javaspecialists.eu/archive/Issue124.html).</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">  *            the runnable under investigation</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> runs = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (++runs &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Test not accurate&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   expired = <span class="keyword">false</span>;</span><br><span class="line">   start = System.currentTimeMillis();</span><br><span class="line">   Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">   timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     expired = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;, testtime);</span><br><span class="line">   <span class="keyword">while</span> (!expired) &#123;</span><br><span class="line">    task.run();</span><br><span class="line">   &#125;</span><br><span class="line">   start = System.currentTimeMillis() - start;</span><br><span class="line">   timer.cancel();</span><br><span class="line">  &#125; <span class="keyword">while</span> (Math.abs(start - testtime) &gt; EPSYLON);</span><br><span class="line">  collectGarbage(<span class="number">3</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collectGarbage</span><span class="params">(<span class="keyword">int</span> times)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">   System.gc();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Calculates the memory usage of a single element in a work queue. Based on Heinz Kabbutz&#x27; ideas</span></span><br><span class="line"><span class="comment">  * (http://www.javaspecialists.eu/archive/Issue029.html).</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> memory usage of a single &#123;<span class="doctag">@link</span> Runnable&#125; element in the thread pools work queue</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">calculateMemoryUsage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BlockingQueue&lt;Runnable&gt; queue = createWorkQueue();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) &#123;</span><br><span class="line">   queue.add(creatTask());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> mem0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  <span class="keyword">long</span> mem1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  queue = <span class="keyword">null</span>;</span><br><span class="line">  collectGarbage(<span class="number">15</span>);</span><br><span class="line">  mem0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  queue = createWorkQueue();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) &#123;</span><br><span class="line">   queue.add(creatTask());</span><br><span class="line">  &#125;</span><br><span class="line">  collectGarbage(<span class="number">15</span>);</span><br><span class="line">  mem1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">  <span class="keyword">return</span> (mem1 - mem0) / SAMPLE_QUEUE_SIZE;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Create your runnable task here.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> an instance of your runnable task under investigation</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Runnable <span class="title">creatTask</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Return an instance of the queue used in the thread pool.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> queue instance</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> BlockingQueue&lt;Runnable&gt; <span class="title">createWorkQueue</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Calculate current cpu time. Various frameworks may be used here, depending on the operating system in use. (e.g.</span></span><br><span class="line"><span class="comment">  * http://www.hyperic.com/products/sigar). The more accurate the CPU time measurement, the more accurate the results</span></span><br><span class="line"><span class="comment">  * for thread count boundaries.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> current cpu time of current thread</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getCurrentThreadCPUTime</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.javacodegeeks.com/2012/03/threading-stories-about-robust-thread.html">docs</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="线程" scheme="http://example.com/categories/thread/"/>
    
    
  </entry>
  
</feed>
